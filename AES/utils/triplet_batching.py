import numpy as np


class TripletBatching:

    def __init__(self, batch_size,
                 max_len_seq_doc,
                 max_len_seq_summ,
                 random_sent_ordering=True,
                 strategy="easy_mining_triplets"):

        self.batch_size = batch_size
        self.max_len_seq_doc = max_len_seq_doc
        self.max_len_seq_summ = max_len_seq_summ
        self.batch_count = 0
        self.random_sent_ordering = random_sent_ordering
        self.strategy = getattr(self, strategy)
        self._initialize_arrays()

    def _initialize_arrays(self):
        # Documents #
        self.batch_doc_token_ids = np.zeros((self.batch_size, self.max_len_seq_doc))
        self.batch_doc_positions = np.zeros((self.batch_size, self.max_len_seq_doc))
        self.batch_doc_segments = np.zeros((self.batch_size, self.max_len_seq_doc))
        self.batch_doc_masks = np.zeros((self.batch_size, self.max_len_seq_doc))

        # Positives summaries are the reference summaries #
        self.batch_pos_summ_token_ids = np.zeros((self.batch_size, self.max_len_seq_summ))
        self.batch_pos_summ_positions = np.zeros((self.batch_size, self.max_len_seq_summ))
        self.batch_pos_summ_segments = np.zeros((self.batch_size, self.max_len_seq_summ))
        self.batch_pos_summ_masks = np.zeros((self.batch_size, self.max_len_seq_summ))

        # Negative summaries are generated by this class #
        self.batch_neg_summ_token_ids = np.zeros((self.batch_size, self.max_len_seq_summ))
        self.batch_neg_summ_positions = np.zeros((self.batch_size, self.max_len_seq_summ))
        self.batch_neg_summ_segments = np.zeros((self.batch_size, self.max_len_seq_summ))
        self.batch_neg_summ_masks = np.zeros((self.batch_size, self.max_len_seq_summ))

    def update(self, doc_token_ids, doc_positions,
               doc_segments, doc_masks,
               summ_token_ids, summ_positions,
               summ_segments, summ_masks):

        self.batch_doc_token_ids[self.batch_count] = doc_token_ids
        self.batch_doc_positions[self.batch_count] = doc_positions
        self.batch_doc_segments[self.batch_count] = doc_segments
        self.batch_doc_masks[self.batch_count] = doc_masks

        self.batch_pos_summ_token_ids[self.batch_count] = summ_token_ids
        self.batch_pos_summ_positions[self.batch_count] = summ_positions
        self.batch_pos_summ_segments[self.batch_count] = summ_segments
        self.batch_pos_summ_masks[self.batch_count] = summ_masks

        self.batch_count += 1

        if self.batch_count == self.batch_size:
            batch = self.strategy()[:]
            self._initialize_arrays()
            self.batch_count = 0
            return batch

        else:
            return None

    def hard_mining_triplets(self):
        pass

    # Random shuffling of summaries to be negative summaries
    def easy_mining_triplets(self):
        p = np.random.permutation(self.batch_size)
        self.batch_neg_summ_token_ids = np.copy(self.batch_pos_summ_token_ids)[p]
        self.batch_neg_summ_positions = np.copy(self.batch_pos_summ_positions)[p]
        self.batch_neg_summ_segments = np.copy(self.batch_pos_summ_segments)[p]
        self.batch_neg_summ_masks = np.copy(self.batch_pos_summ_masks)[p]

        return [self.batch_doc_token_ids, self.batch_doc_positions,
                self.batch_doc_segments, self.batch_doc_masks,
                self.batch_pos_summ_token_ids, self.batch_pos_summ_positions,
                self.batch_pos_summ_segments, self.batch_pos_summ_masks,
                self.batch_neg_summ_token_ids, self.batch_neg_summ_positions,
                self.batch_neg_summ_segments, self.batch_neg_summ_masks]